{"version":3,"file":"index.mjs","sources":["../src/useAxiosRequest.ts","../src/useAxiosQuery.ts"],"sourcesContent":["import axios, {\n  AxiosError,\n  AxiosRequestConfig,\n  AxiosResponse,\n  Canceler,\n} from 'axios';\nimport axiosRetry, { IAxiosRetryConfig } from 'axios-retry';\nimport { useCallback, useEffect, useRef } from 'react';\n\nexport const REQUEST_MANUALLY_CANCELLED = 'REQUEST_MANUALLY_CANCELLED';\nexport const REQUEST_AUTOMATICALLY_CANCELLED =\n  'REQUEST_AUTOMATICALLY_CANCELLED';\n\nexport type HookOptions = {\n  authorizationHandler?: (e: AxiosError) => void;\n  cancelAutomatically?: boolean;\n};\n\nexport type RequestGenerator<ResponseDataType> = (\n  url: string,\n  options?: AxiosRequestConfig\n) => Promise<AxiosResponse<ResponseDataType>>;\n\nexport type RequestGeneratorWithoutDataOptions = Omit<AxiosRequestConfig, 'data'>;\n\nexport type RequestGeneratorWithData<ResponseDataType> = (\n  url: string,\n  data: any,\n  options: RequestGeneratorWithoutDataOptions\n) => Promise<AxiosResponse<ResponseDataType>>;\n\nexport type RequestGenerators<ResponseDataType> = {\n  delete: RequestGenerator<ResponseDataType>;\n  get: RequestGenerator<ResponseDataType>;\n  head: RequestGenerator<ResponseDataType>;\n  options: RequestGenerator<ResponseDataType>;\n  patch: RequestGeneratorWithData<ResponseDataType>;\n  post: RequestGeneratorWithData<ResponseDataType>;\n  put: RequestGeneratorWithData<ResponseDataType>;\n};\n\nexport type RequesterReturnType<ResponseDataType> = [RequestGenerators<ResponseDataType>, () => void];\n\nexport const useAxiosRequest = <ResponseDataType>(\n  axiosOptions: AxiosRequestConfig = {},\n  retryOptions: IAxiosRetryConfig = {},\n  hookOptions: HookOptions = {}\n): [RequestGenerators<ResponseDataType>, () => void] => {\n  const mergedHookOptions = {\n    authorizationHandler: null,\n    cancelAutomatically: true,\n    ...hookOptions,\n  };\n\n  const cancelRef = useRef<Canceler[]>([]);\n\n  const canceler = (reason?: string) => {\n    cancelRef.current.forEach((callback: (reason?: string) => void) => {\n      if (typeof callback === 'function') {\n        callback(reason);\n      }\n    });\n  };\n\n  const request = useCallback(\n    (url: string, method: string, requestOptions: AxiosRequestConfig = {}) =>\n      new Promise<AxiosResponse<ResponseDataType>>((resolve, reject) => {\n        const { cancel, token } = axios.CancelToken.source();\n        cancelRef.current.push(cancel);\n\n        const instance = axios.create();\n        const { headers, ...otherOptions } = {\n          ...axiosOptions,\n          ...requestOptions,\n        };\n\n        axiosRetry(instance, {\n          ...{\n            retries: 5,\n            retryDelay: (retryCount: number) => retryCount * 3000,\n          },\n          ...retryOptions,\n        });\n\n        instance\n          .request({\n            cancelToken: token,\n            headers: {\n              ...headers,\n            },\n            method,\n            url,\n            withCredentials: true,\n            ...otherOptions,\n          })\n          .then(resolve)\n          .catch((e: AxiosError) => {\n            reject(e);\n\n            if (e && e.response && e.response.status === 401) {\n              const { authorizationHandler } = mergedHookOptions;\n              if (typeof authorizationHandler === 'function') {\n                authorizationHandler(e);\n              }\n            }\n          });\n      }),\n    []\n  );\n\n  const generators: RequestGenerators<ResponseDataType> = {\n    delete: (url: string, options: AxiosRequestConfig = {}) =>\n      request(url, 'delete', options),\n    get: (url: string, options: AxiosRequestConfig = {}) =>\n      request(url, 'get', options),\n    head: (url: string, options: AxiosRequestConfig = {}) =>\n      request(url, 'head', options),\n    patch: (\n      url: string,\n      data: any = null,\n      options: RequestGeneratorWithoutDataOptions = {}\n    ) => request(url, 'patch', { ...options, data }),\n    options: (url: string, options: AxiosRequestConfig = {}) =>\n      request(url, 'options', options),\n    post: (\n      url: string,\n      data: any = null,\n      options: RequestGeneratorWithoutDataOptions = {}\n    ) => request(url, 'post', { ...options, data }),\n    put: (\n      url: string,\n      data: any = null,\n      options: RequestGeneratorWithoutDataOptions = {}\n    ) => request(url, 'put', { ...options, data }),\n  };\n\n  useEffect(\n    () => () => {\n      const { cancelAutomatically } = mergedHookOptions;\n      if (cancelAutomatically) {\n        canceler(REQUEST_AUTOMATICALLY_CANCELLED);\n      }\n    },\n    []\n  );\n\n  return [generators, () => canceler(REQUEST_MANUALLY_CANCELLED)];\n};\n","import { AxiosError, AxiosRequestConfig } from 'axios';\nimport { IAxiosRetryConfig } from 'axios-retry';\nimport {\n  QueryKey,\n  useQuery,\n  UseQueryOptions,\n  UseQueryResult,\n} from '@tanstack/react-query';\nimport { HookOptions, RequestGenerators, useAxiosRequest } from './useAxiosRequest';\n\nexport type QueryOptions<ResponseDataType> = Omit<\n  UseQueryOptions<ResponseDataType, AxiosError>,\n  'queryFn' | 'queryKey'\n>;\n\nexport const useAxiosQuery = <ResponseDataType>(\n  name: QueryKey,\n  queryFn: (\n    generator: RequestGenerators<ResponseDataType>,\n    canceller: () => void\n  ) => Promise<ResponseDataType>,\n  options: QueryOptions<ResponseDataType> = {},\n  axiosOptions: AxiosRequestConfig = {},\n  retryOptions: IAxiosRetryConfig = {},\n  hookOptions: HookOptions = {}\n): [\n  ResponseDataType | undefined,\n  Omit<UseQueryResult<ResponseDataType, AxiosError>, 'data'>\n] => {\n  const [request, canceller] = useAxiosRequest<ResponseDataType>(axiosOptions, retryOptions, hookOptions);\n\n  const { data, ...otherProps } = useQuery<ResponseDataType, AxiosError>(\n    name,\n    () => queryFn(request, canceller),\n    options\n  );\n\n  return [data, otherProps];\n};\n"],"names":[],"mappings":"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"}